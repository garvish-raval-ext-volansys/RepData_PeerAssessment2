x <- c(4, TRUE)
x
class x
class(x)
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] == 0
x <- 4L
class(x)
x <- 4
class(x)
x <- c(4, "a", TRUE)
class(x)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean <- function(directory, pollutant = "sulfate", id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'pollutant' is a character vector of length 1 indicating
## the name of the pollutant for which we will calculate the
## mean; either "sulfate" or "nitrate".
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return the mean of the pollutant across all monitors list
## in the 'id' vector (ignoring NA values)
# set working directory
if(grep("specdata", directory) == 1) {
directory <- ("./specdata/")
}
# initialize a vector to hold the pollutant data
mean_vector <- c()
# find all files in the specdata folder
all_files <- as.character( list.files(directory) )
file_paths <- paste(directory, all_files, sep="")
for(i in id) {
current_file <- read.csv(file_paths[i], header=T, sep=",")
head(current_file)
pollutant
na_removed <- current_file[!is.na(current_file[, pollutant]), pollutant]
mean_vector <- c(mean_vector, na_removed)
}
result <- mean(mean_vector)
return(round(result, 3))
}
pollutantmean("specdata", "sulfate", 34)
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
source("pollutantmean.R")
install.packages("swirl")
x <- 1:4
y <- 2:3
x + y
x <- c(4, "a", TRUE)
class(x)
x <- 4
class(x)
str(file)
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
1 == 2
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
1(5 == 7)
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints[ints > 7])
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
submit()
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0)
)
evaluate(function(x){x[len(x)]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("hello")
submit()
submit()
mad_libs(place = "Ahmedabad", adjective = "the", noun = ",")
submit()
"I" %p% "love" %p% "R!"
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5
)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Hii")
submit()
mad_libs(place = "US", adjective ="the", noun=",")
submit()
'I' %p% 'love'%p% 'R!'
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d1 <- as.Date("1969-01-01")
d2 <- as.Date("1969-01-01")
unclassd2()
unclass(d2)
Sys.time()
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/pollutantmean.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/pollutantmean.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/pollutantmean.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/pollutantmean.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/pollutantmean.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/pollutantmean.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/pollutantmean.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/complete.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/complete.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/corr.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/2 R Programming/Week 2/Assignment/specdata/corr.R')
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
Sepal.Length
iris
mean(iris$Sepal.Length)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris[, 1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
mean(mtcars$mpg, mtcars$cyl)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
sapply(mtcars, cyl, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
debug(ls)
ls
ls
library(datasets)
data(iris)
?iris
round(mean(iris[which(iris$Species == "virginica"),]$Sepal.Length))
set.seed(1)
rpois(5, 2)
best("SC", "heart attack")
install.packages("plyr")
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/Assignments/RepData_PeerAssessment2/storm.analysis.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/Assignments/RepData_PeerAssessment2/storm.analysis.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/Assignments/RepData_PeerAssessment2/storm.analysis.R')
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/Assignments/RepData_PeerAssessment2/storm.analysis.R')
install.packages("gridExtra")
source('D:/Projects/DataScience/Coursera Certification/Data Science Specialization/Assignments/RepData_PeerAssessment2/storm.analysis.R')
View(storm)
View(storm)
unique(storm$EVTYPE)
head(storm)
desc(storm)
# translate all letters to lowercase
event_types <- tolower(storm$EVTYPE)
# replace all punct. characters with a space
event_types <- gsub("[[:blank:][:punct:]+]", " ", event_types)
uniqueEvent <- length(unique(event_types))
print("Number of Unique Events are", uniqueEvent)
print("Number of Unique Events are", str(uniqueEvent))
print("Number of Unique Events are %d", str(uniqueEvent))
casualties <- ddply(storm, .(EVTYPE), summarize,
fatalities = sum(FATALITIES),
injuries = sum(INJURIES))
casualties
strom %>% select(EVTYPE , fatalities, injuries) %>%
summarise(fatalities = sum(FATALITIES), injuries = sum(INJURIES))
## ------------------------------------------------------------------------
library(plyr)
library(dplyr)
library(ggplot2)
library(gridExtra)
strom %>% select(EVTYPE , fatalities, injuries) %>%
summarise(fatalities = sum(FATALITIES), injuries = sum(INJURIES))
storm %>% select(EVTYPE , fatalities, injuries) %>%
summarise(fatalities = sum(FATALITIES), injuries = sum(INJURIES))
select(storm, EVTYPE , fatalities, injuries)
storm %>% select(EVTYPE , FATALITIES, INJURIES) %>%
summarise(fatalities = sum(FATALITIES), injuries = sum(INJURIES))
storm %>% select(EVTYPE , FATALITIES, INJURIES) %>%
group_by(EVTYPE) %>%
summarise(fatalities = sum(FATALITIES), injuries = sum(INJURIES))
storm %>% select(EVTYPE , FATALITIES, INJURIES) %>%
group_by(EVTYPE) %>%
summarise(fatalities = sum(FATALITIES), injuries = sum(INJURIES)) %>%
arrange(desc(FATALITIES), desc(INJURIES))
storm %>% select(EVTYPE , FATALITIES, INJURIES) %>%
group_by(EVTYPE) %>%
summarise(fatalities = sum(FATALITIES), injuries = sum(INJURIES)) %>%
arrange(desc(FATALITIES), desc(INJURIES))
storm %>% select(EVTYPE , FATALITIES, INJURIES) %>%
group_by(EVTYPE) %>%
summarise(FATALITIES = sum(FATALITIES), INJURIES = sum(INJURIES)) %>%
arrange(desc(FATALITIES), desc(INJURIES))
# Find events that caused most death and injury
fatal_events_10 <- casualties %>%  head(10)
fatal_events_10
casualties <- storm %>% select(EVTYPE , FATALITIES, INJURIES) %>%
group_by(EVTYPE) %>%
summarise(FATALITIES = sum(FATALITIES), INJURIES = sum(INJURIES)) %>%
arrange(desc(FATALITIES), desc(INJURIES))
casualties
# Find events that caused most death and injury
fatal_events_10 <- casualties %>%  head(10)
casualties <- storm %>% select(EVTYPE , FATALITIES, INJURIES) %>%
group_by(EVTYPE) %>%
summarise(FATALITIES = sum(FATALITIES), INJURIES = sum(INJURIES)) %>%
arrange(desc(FATALITIES), desc(INJURIES))
# Find events that caused most death and injury
fatal_events_10 <- casualties %>% SELECT(EVTYPE , FATALITIES) %>%  head(10)
injury_events_10 <- casualties %>% SELECT(EVTYPE , INJURIES) %>%  head(10)
casualties <- storm %>% select(EVTYPE , FATALITIES, INJURIES) %>%
group_by(EVTYPE) %>%
summarise(FATALITIES = sum(FATALITIES), INJURIES = sum(INJURIES)) %>%
arrange(desc(FATALITIES), desc(INJURIES))
# Find events that caused most death and injury
fatal_events_10 <- casualties %>% select(EVTYPE , FATALITIES) %>%  head(10)
injury_events_10 <- casualties %>% select(EVTYPE , INJURIES) %>%  head(10)
## ------------------------------------------------------------------------
injury_events_10
## ------------------------------------------------------------------------
injury_events_10
## ------------------------------------------------------------------------
fatal_events_10
## ------------------------------------------------------------------------
injury_events_10
exp_transform <- function(e) {
# h -> hundred, k -> thousand, m -> million, b -> billion
if (e %in% c('h', 'H'))
return(2)
else if (e %in% c('k', 'K'))
return(3)
else if (e %in% c('m', 'M'))
return(6)
else if (e %in% c('b', 'B'))
return(9)
else if (!is.na(as.numeric(e))) # if a digit
return(as.numeric(e))
else if (e %in% c('', '-', '?', '+'))
return(0)
else {
stop("Invalid exponent value.")
}
}
## ----cache=TRUE----------------------------------------------------------
prop_dmg_exp <- sapply(storm$PROPDMGEXP, FUN=exp_transform)
storm$prop_dmg <- storm$PROPDMG * (10 ** prop_dmg_exp)
crop_dmg_exp <- sapply(storm$CROPDMGEXP, FUN=exp_transform)
storm$crop_dmg <- storm$CROPDMG * (10 ** crop_dmg_exp)
econ_loss <- ddply(storm, .(EVTYPE), summarize,
prop_dmg = sum(prop_dmg),
crop_dmg = sum(crop_dmg))
# Top 10 most harmful Events with respect to Population Health
economicsLoss <- storm %>% select(EVTYPE , prop_dmg, crop_dmg) %>%
group_by(EVTYPE) %>%
summarise(prop_dmg = sum(prop_dmg), crop_dmg = sum(crop_dmg)) %>%
arrange(desc(prop_dmg), desc(crop_dmg))
## Find events that caused most death and injury
prop_dmg_10 <- economicsLoss %>% select(EVTYPE , prop_dmg) %>%  head(10)
crop_dmg_10 <- economicsLoss %>% select(EVTYPE , crop_dmg) %>%  head(10)
prop_dmg_10
crop_dmg_10
## Set the levels in order
p1 <- ggplot(data=fatal_events_10,
aes(x=reorder(EVTYPE, FATALITIES), y=FATALITIES, fill=FATALITIES)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of fatalities") +
xlab("Event type") +
theme(legend.position="none")
p2 <- ggplot(data=injury_events_10,
aes(x=reorder(EVTYPE, INJURIES), y=INJURIES, fill=injuries)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of injuries") +
xlab("Event type") +
theme(legend.position="none")
grid.arrange(p1, p2, main="Top deadly weather events in the US (1950-2011)")
p2 <- ggplot(data=injury_events_10,
aes(x=reorder(EVTYPE, INJURIES), y=INJURIES, fill=INJURIES)) +
geom_bar(stat="identity") +
coord_flip() +
ylab("Total number of injuries") +
xlab("Event type") +
theme(legend.position="none")
grid.arrange(p1, p2, main="Top deadly weather events in the US (1950-2011)")
grid.arrange(p1, p2, ncol=2,top="Top deadly weather events in the US (1950-2011)")
grid.arrange(p1, p2, nrow=2,top="Top deadly weather Events in the US (1950-2011)")
# Set the levels in order
p1 <- ggplot(data=prop_dmg_events,
aes(x=reorder(EVTYPE, prop_dmg), y=log10(prop_dmg), fill=prop_dmg )) +
geom_bar(stat="identity") +
coord_flip() +
xlab("Event type") +
ylab("Property damage in dollars (log-scale)") +
theme(legend.position="none")
p2 <- ggplot(data=crop_dmg_events,
aes(x=reorder(EVTYPE, crop_dmg), y=crop_dmg, fill=crop_dmg)) +
geom_bar(stat="identity") +
coord_flip() +
xlab("Event type") +
ylab("Crop damage in dollars") +
theme(legend.position="none")
grid.arrange(p1, p2, nrow=2, top=="Weather costs to the US economy (1950-2011)")
grid.arrange(p1, p2, nrow=2, top="Weather costs to the US economy (1950-2011)")
# Set the levels in order
p1 <- ggplot(data=prop_dmg_10,
aes(x=reorder(EVTYPE, prop_dmg), y=log10(prop_dmg), fill=prop_dmg )) +
geom_bar(stat="identity") +
coord_flip() +
xlab("Event type") +
ylab("Property damage in dollars (log-scale)") +
theme(legend.position="none")
p2 <- ggplot(data=crop_dmg_10,
aes(x=reorder(EVTYPE, crop_dmg), y=crop_dmg, fill=crop_dmg)) +
geom_bar(stat="identity") +
coord_flip() +
xlab("Event type") +
ylab("Crop damage in dollars") +
theme(legend.position="none")
grid.arrange(p1, p2, nrow=2, top="Weather costs to the US economy (1950-2011)")
# Load Required Libraries
library(plyr)
library(dplyr)
library(knitr)
library(ggplot2)
library(gridExtra)
storm <- read.csv(bzfile("data/repdata-data-StormData.csv.bz2"))
